# GraphQL Schema for Muralla Backend
# Schema-first approach as per Essence & Spirit.ini

scalar DateTime
scalar JSON

# User Management
type User {
  id: ID!
  email: String!
  username: String!
  firstName: String!
  lastName: String!
  isActive: Boolean!
  role: Role!
  tasks: [Task!]!
  documents: [Document!]!
  sales: [Sale!]!
  transactions: [Transaction!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Role {
  id: ID!
  name: String!
  permissions: [String!]!
  users: [User!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Projects & Tasks
type Project {
  id: ID!
  name: String!
  description: String
  status: String!
  startDate: DateTime
  endDate: DateTime
  tasks: [Task!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Task {
  id: ID!
  title: String!
  description: String
  status: TaskStatus!
  priority: String
  dueDate: DateTime
  project: Project!
  assignee: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

# Knowledge Hub
type Document {
  id: ID!
  title: String!
  content: String!
  type: DocumentType!
  author: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum DocumentType {
  POLICY
  SOP
  PLAYBOOK
  TEMPLATE
  WIKI
}

# Inventory & Sales
type Product {
  id: ID!
  name: String!
  description: String
  price: Float!
  stock: Int!
  sku: String
  sales: [Sale!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Sale {
  id: ID!
  quantity: Int!
  totalAmount: Float!
  product: Product!
  seller: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Finance
type Transaction {
  id: ID!
  amount: Float!
  type: TransactionType!
  category: String!
  description: String
  creator: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

type FinancialSummary {
  totalIncome: Float!
  totalExpenses: Float!
  netProfit: Float!
  transactionCount: Int!
}

# Input Types
input CreateUserInput {
  email: String!
  username: String!
  firstName: String!
  lastName: String!
  password: String!
  roleId: String!
}

input UpdateUserInput {
  email: String
  username: String
  firstName: String
  lastName: String
  isActive: Boolean
  roleId: String
}

input CreateProjectInput {
  name: String!
  description: String
  status: String!
  startDate: DateTime
  endDate: DateTime
}

input CreateTaskInput {
  title: String!
  description: String
  status: TaskStatus!
  priority: String
  dueDate: DateTime
  projectId: String!
  assigneeId: String
}

input CreateDocumentInput {
  title: String!
  content: String!
  type: DocumentType!
}

input CreateProductInput {
  name: String!
  description: String
  price: Float!
  stock: Int!
  sku: String
}

input CreateSaleInput {
  quantity: Int!
  totalAmount: Float!
  productId: String!
}

input CreateTransactionInput {
  amount: Float!
  type: TransactionType!
  category: String!
  description: String
}

# Queries
type Query {
  # Users
  users: [User!]!
  user(id: ID!): User
  
  # Roles
  roles: [Role!]!
  role(id: ID!): Role
  
  # Projects
  projects: [Project!]!
  project(id: ID!): Project
  
  # Tasks
  tasks(projectId: String, assigneeId: String): [Task!]!
  task(id: ID!): Task
  
  # Knowledge
  documents(type: DocumentType, authorId: String): [Document!]!
  document(id: ID!): Document
  
  # Inventory
  products: [Product!]!
  product(id: ID!): Product
  
  # Sales
  sales(productId: String, sellerId: String): [Sale!]!
  sale(id: ID!): Sale
  
  # Finance
  transactions(type: TransactionType, category: String, creatorId: String): [Transaction!]!
  transaction(id: ID!): Transaction
  financialSummary: FinancialSummary!
}

# Mutations
type Mutation {
  # Users
  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
  
  # Projects
  createProject(input: CreateProjectInput!): Project!
  updateProject(id: ID!, input: CreateProjectInput!): Project!
  deleteProject(id: ID!): Boolean!
  
  # Tasks
  createTask(input: CreateTaskInput!): Task!
  updateTask(id: ID!, input: CreateTaskInput!): Task!
  deleteTask(id: ID!): Boolean!
  
  # Knowledge
  createDocument(input: CreateDocumentInput!): Document!
  updateDocument(id: ID!, input: CreateDocumentInput!): Document!
  deleteDocument(id: ID!): Boolean!
  
  # Inventory
  createProduct(input: CreateProductInput!): Product!
  updateProduct(id: ID!, input: CreateProductInput!): Product!
  deleteProduct(id: ID!): Boolean!
  
  # Sales
  createSale(input: CreateSaleInput!): Sale!
  updateSale(id: ID!, input: CreateSaleInput!): Sale!
  deleteSale(id: ID!): Boolean!
  
  # Finance
  createTransaction(input: CreateTransactionInput!): Transaction!
  updateTransaction(id: ID!, input: CreateTransactionInput!): Transaction!
  deleteTransaction(id: ID!): Boolean!
}

# Subscriptions
type Subscription {
  taskUpdated: Task!
  documentUpdated: Document!
  saleCreated: Sale!
  transactionCreated: Transaction!
}
