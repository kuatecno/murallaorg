name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/muralla-backend

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: muralla_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build common package
      run: pnpm --filter @muralla/common build

    - name: Generate Prisma client
      run: pnpm --filter muralla-backend exec prisma generate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/muralla_test

    - name: Run database migrations
      run: pnpm --filter muralla-backend exec prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/muralla_test

    - name: Lint backend
      run: pnpm --filter muralla-backend lint:check

    - name: Run unit tests
      run: pnpm --filter muralla-backend test:unit
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/muralla_test
        JWT_SECRET: test-jwt-secret
        JWT_EXPIRES_IN: 1h
        REDIS_URL: redis://localhost:6379

    - name: Run e2e tests
      run: pnpm --filter muralla-backend test:e2e
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/muralla_test
        JWT_SECRET: test-jwt-secret
        JWT_EXPIRES_IN: 1h
        REDIS_URL: redis://localhost:6379

    - name: Generate test coverage
      run: pnpm --filter muralla-backend test:cov
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/muralla_test
        JWT_SECRET: test-jwt-secret
        JWT_EXPIRES_IN: 1h
        REDIS_URL: redis://localhost:6379

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./muralla-backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  build-and-push:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./muralla-backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # For example: kubectl apply -f k8s/staging/ or docker-compose up -d

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # For example: kubectl apply -f k8s/production/ or docker-compose up -d
