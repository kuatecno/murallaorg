
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  permissions: 'permissions',
  tenantId: 'tenantId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  tenantId: 'tenantId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  projectId: 'projectId',
  assigneeId: 'assigneeId',
  tenantId: 'tenantId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  slug: 'slug',
  summary: 'summary',
  type: 'type',
  status: 'status',
  tags: 'tags',
  parentId: 'parentId',
  authorId: 'authorId',
  tenantId: 'tenantId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  publishedAt: 'publishedAt',
  viewCount: 'viewCount',
  lastViewedAt: 'lastViewedAt'
};

exports.Prisma.DocumentRevisionScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  version: 'version',
  title: 'title',
  content: 'content',
  summary: 'summary',
  changeLog: 'changeLog',
  authorId: 'authorId',
  tenantId: 'tenantId',
  createdAt: 'createdAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  stock: 'stock',
  category: 'category',
  tenantId: 'tenantId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SaleScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  quantity: 'quantity',
  total: 'total',
  soldBy: 'soldBy',
  tenantId: 'tenantId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.BankAccountScalarFieldEnum = {
  id: 'id',
  name: 'name',
  accountNumber: 'accountNumber',
  bankName: 'bankName',
  accountType: 'accountType',
  currency: 'currency',
  currentBalance: 'currentBalance',
  isActive: 'isActive',
  tenantId: 'tenantId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  icon: 'icon',
  color: 'color',
  description: 'description',
  isActive: 'isActive',
  tenantId: 'tenantId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  description: 'description',
  amount: 'amount',
  type: 'type',
  status: 'status',
  paymentMethod: 'paymentMethod',
  reference: 'reference',
  externalId: 'externalId',
  accountId: 'accountId',
  categoryId: 'categoryId',
  customerName: 'customerName',
  supplierName: 'supplierName',
  employeeName: 'employeeName',
  projectName: 'projectName',
  items: 'items',
  notes: 'notes',
  receiptUrl: 'receiptUrl',
  mpPaymentId: 'mpPaymentId',
  mpStatus: 'mpStatus',
  mpPaymentType: 'mpPaymentType',
  tenantId: 'tenantId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  payrollId: 'payrollId'
};

exports.Prisma.BankBalanceScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  balanceDate: 'balanceDate',
  openingBalance: 'openingBalance',
  closingBalance: 'closingBalance',
  totalIncome: 'totalIncome',
  totalExpenses: 'totalExpenses',
  transactionCount: 'transactionCount',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  password: 'password',
  isActive: 'isActive',
  roleId: 'roleId',
  tenantId: 'tenantId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MagicTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  purpose: 'purpose',
  tokenHash: 'tokenHash',
  expiresAt: 'expiresAt',
  tenantId: 'tenantId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditTrailScalarFieldEnum = {
  id: 'id',
  tableName: 'tableName',
  recordId: 'recordId',
  operation: 'operation',
  beforeData: 'beforeData',
  afterData: 'afterData',
  userId: 'userId',
  tenantId: 'tenantId',
  timestamp: 'timestamp',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};

exports.Prisma.NotificationTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  subject: 'subject',
  content: 'content',
  variables: 'variables',
  isActive: 'isActive',
  createdBy: 'createdBy',
  tenantId: 'tenantId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationRuleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  trigger: 'trigger',
  conditions: 'conditions',
  isActive: 'isActive',
  templateId: 'templateId',
  recipients: 'recipients',
  delay: 'delay',
  createdBy: 'createdBy',
  tenantId: 'tenantId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  subject: 'subject',
  content: 'content',
  recipientId: 'recipientId',
  templateId: 'templateId',
  ruleId: 'ruleId',
  entityType: 'entityType',
  entityId: 'entityId',
  metadata: 'metadata',
  scheduledAt: 'scheduledAt',
  sentAt: 'sentAt',
  failedAt: 'failedAt',
  errorMessage: 'errorMessage',
  readAt: 'readAt',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PayrollScalarFieldEnum = {
  id: 'id',
  runDate: 'runDate',
  payPeriodStart: 'payPeriodStart',
  payPeriodEnd: 'payPeriodEnd',
  status: 'status',
  totalGrossPay: 'totalGrossPay',
  totalDeductions: 'totalDeductions',
  totalNetPay: 'totalNetPay',
  notes: 'notes',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  processedBy: 'processedBy',
  processedAt: 'processedAt',
  tenantId: 'tenantId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PayrollEntryScalarFieldEnum = {
  id: 'id',
  payrollId: 'payrollId',
  employeeId: 'employeeId',
  baseSalary: 'baseSalary',
  hoursWorked: 'hoursWorked',
  overtimeHours: 'overtimeHours',
  bonusAmount: 'bonusAmount',
  allowances: 'allowances',
  grossPay: 'grossPay',
  taxDeductions: 'taxDeductions',
  socialSecurity: 'socialSecurity',
  otherDeductions: 'otherDeductions',
  netPay: 'netPay',
  notes: 'notes',
  tenantId: 'tenantId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SalaryAdjustmentScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  adjustmentType: 'adjustmentType',
  previousAmount: 'previousAmount',
  newAmount: 'newAmount',
  effectiveDate: 'effectiveDate',
  reason: 'reason',
  notes: 'notes',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  tenantId: 'tenantId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployeeExpenseScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  description: 'description',
  amount: 'amount',
  category: 'category',
  expenseDate: 'expenseDate',
  receiptUrl: 'receiptUrl',
  status: 'status',
  submittedAt: 'submittedAt',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  reimbursedAt: 'reimbursedAt',
  reimbursementTransactionId: 'reimbursementTransactionId',
  notes: 'notes',
  tenantId: 'tenantId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PTORequestScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  startDate: 'startDate',
  endDate: 'endDate',
  totalDays: 'totalDays',
  status: 'status',
  reason: 'reason',
  submittedAt: 'submittedAt',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  rejectedAt: 'rejectedAt',
  cancelledAt: 'cancelledAt',
  tenantId: 'tenantId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PTOBalanceScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  year: 'year',
  totalDays: 'totalDays',
  usedDays: 'usedDays',
  carryOverDays: 'carryOverDays',
  tenantId: 'tenantId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.TaskStatus = exports.$Enums.TaskStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  DONE: 'DONE'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  WIKI: 'WIKI',
  SOP: 'SOP',
  PLAYBOOK: 'PLAYBOOK',
  TEMPLATE: 'TEMPLATE'
};

exports.DocumentStatus = exports.$Enums.DocumentStatus = {
  DRAFT: 'DRAFT',
  REVIEW: 'REVIEW',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  INCOME: 'INCOME',
  EXPENSE: 'EXPENSE',
  TRANSFER: 'TRANSFER'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  MERCADO_PAGO: 'MERCADO_PAGO',
  BANK_TRANSFER: 'BANK_TRANSFER',
  CASH: 'CASH',
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  CHECK: 'CHECK',
  OTHER: 'OTHER'
};

exports.AuditOperation = exports.$Enums.AuditOperation = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  RESTORE: 'RESTORE'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  EMAIL: 'EMAIL',
  PUSH: 'PUSH',
  IN_APP: 'IN_APP',
  SMS: 'SMS'
};

exports.RuleTrigger = exports.$Enums.RuleTrigger = {
  TASK_CREATED: 'TASK_CREATED',
  TASK_UPDATED: 'TASK_UPDATED',
  TASK_COMPLETED: 'TASK_COMPLETED',
  DOCUMENT_CREATED: 'DOCUMENT_CREATED',
  DOCUMENT_UPDATED: 'DOCUMENT_UPDATED',
  USER_REGISTERED: 'USER_REGISTERED',
  PROJECT_CREATED: 'PROJECT_CREATED',
  DEADLINE_APPROACHING: 'DEADLINE_APPROACHING',
  STOCK_LOW: 'STOCK_LOW',
  CUSTOM: 'CUSTOM'
};

exports.NotificationStatus = exports.$Enums.NotificationStatus = {
  PENDING: 'PENDING',
  SENT: 'SENT',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.PayrollStatus = exports.$Enums.PayrollStatus = {
  DRAFT: 'DRAFT',
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  APPROVED: 'APPROVED',
  PROCESSED: 'PROCESSED',
  CANCELLED: 'CANCELLED'
};

exports.SalaryAdjustmentType = exports.$Enums.SalaryAdjustmentType = {
  SALARY_INCREASE: 'SALARY_INCREASE',
  SALARY_DECREASE: 'SALARY_DECREASE',
  BONUS: 'BONUS',
  ALLOWANCE_CHANGE: 'ALLOWANCE_CHANGE',
  PROMOTION: 'PROMOTION',
  DEMOTION: 'DEMOTION',
  ANNUAL_REVIEW: 'ANNUAL_REVIEW'
};

exports.ExpenseStatus = exports.$Enums.ExpenseStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  REIMBURSED: 'REIMBURSED',
  CANCELLED: 'CANCELLED'
};

exports.PTOStatus = exports.$Enums.PTOStatus = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  Role: 'Role',
  Project: 'Project',
  Task: 'Task',
  Document: 'Document',
  DocumentRevision: 'DocumentRevision',
  Product: 'Product',
  Sale: 'Sale',
  BankAccount: 'BankAccount',
  TransactionCategory: 'TransactionCategory',
  Transaction: 'Transaction',
  BankBalance: 'BankBalance',
  User: 'User',
  MagicToken: 'MagicToken',
  AuditTrail: 'AuditTrail',
  NotificationTemplate: 'NotificationTemplate',
  NotificationRule: 'NotificationRule',
  Notification: 'Notification',
  Payroll: 'Payroll',
  PayrollEntry: 'PayrollEntry',
  SalaryAdjustment: 'SalaryAdjustment',
  EmployeeExpense: 'EmployeeExpense',
  PTORequest: 'PTORequest',
  PTOBalance: 'PTOBalance'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
