// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// CORE ENTITIES
// ==========================================

model Staff {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String?   @unique
  password      String
  firstName     String
  lastName      String
  role          StaffRole @default(EMPLOYEE)
  department    String?
  position      String?
  phone         String?
  isActive      Boolean   @default(true)
  hireDate      DateTime?
  metadata      Json      @default("{}")
  tenantId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  tenant              Tenant              @relation(fields: [tenantId], references: [id])
  
  // M:M Relationships
  managedSuppliers    StaffSupplier[]     @relation("StaffManagesSupplier")
  productsOwned       StaffProduct[]      @relation("StaffOwnsProduct")
  productReceived     ProductMovement[]   @relation("ReceivedByStaff")
  productDelivered    ProductMovement[]   @relation("DeliveredByStaff")
  customerRelations   StaffCustomer[]
  transactions        Transaction[]       @relation("TransactionCreatedBy")
  auditLogs           AuditLog[]
  
  @@index([tenantId])
  @@map("staff")
}

model Product {
  id            String    @id @default(cuid())
  sku           String
  name          String
  description   String?
  category      String?
  brand         String?
  unitPrice     Decimal   @db.Decimal(12, 2)
  costPrice     Decimal?  @db.Decimal(12, 2)
  currentStock  Int       @default(0)
  minStock      Int       @default(0)
  maxStock      Int?
  unit          String    @default("UNIT")
  isActive      Boolean   @default(true)
  metadata      Json      @default("{}")
  tenantId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  tenant              Tenant              @relation(fields: [tenantId], references: [id])
  
  // M:M Relationships
  suppliers           ProductSupplier[]
  staffOwners         StaffProduct[]      @relation("ProductOwnedByStaff")
  movements           ProductMovement[]
  transactionItems    TransactionItem[]
  inventoryRecords    InventoryRecord[]
  
  @@unique([tenantId, sku])
  @@index([tenantId, category])
  @@map("products")
}

model Supplier {
  id            String    @id @default(cuid())
  code          String    
  name          String
  rut           String?
  contactName   String?
  email         String?
  phone         String?
  address       String?
  city          String?
  country       String?
  paymentTerms  String?
  rating        Int?
  isActive      Boolean   @default(true)
  metadata      Json      @default("{}")
  tenantId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  tenant              Tenant              @relation(fields: [tenantId], references: [id])
  
  // M:M Relationships
  staffManagers       StaffSupplier[]     @relation("SupplierManagedByStaff")
  products            ProductSupplier[]
  movements           ProductMovement[]
  purchaseOrders      PurchaseOrder[]
  
  @@unique([tenantId, code])
  @@index([tenantId])
  @@map("suppliers")
}

model Customer {
  id            String    @id @default(cuid())
  code          String
  name          String
  rut           String?
  email         String?
  phone         String?
  address       String?
  city          String?
  creditLimit   Decimal?  @db.Decimal(12, 2)
  currentDebt   Decimal   @db.Decimal(12, 2) @default(0)
  isActive      Boolean   @default(true)
  metadata      Json      @default("{}")
  tenantId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  tenant              Tenant              @relation(fields: [tenantId], references: [id])
  
  // M:M Relationships
  staffRelations      StaffCustomer[]
  transactions        Transaction[]
  
  @@unique([tenantId, code])
  @@unique([tenantId, rut])
  @@index([tenantId])
  @@map("customers")
}

// ==========================================
// JUNCTION TABLES (M:M RELATIONSHIPS)
// ==========================================

model StaffSupplier {
  id              String    @id @default(cuid())
  staffId         String
  supplierId      String
  role            String    // e.g., "PRIMARY_CONTACT", "ACCOUNT_MANAGER", "BUYER"
  startDate       DateTime  @default(now())
  endDate         DateTime?
  notes           String?
  
  staff           Staff     @relation("StaffManagesSupplier", fields: [staffId], references: [id])
  supplier        Supplier  @relation("SupplierManagedByStaff", fields: [supplierId], references: [id])
  
  @@unique([staffId, supplierId, role])
  @@index([staffId])
  @@index([supplierId])
  @@map("staff_suppliers")
}

model StaffProduct {
  id              String    @id @default(cuid())
  staffId         String
  productId       String
  relationship    String    // e.g., "OWNER", "MANAGER", "PRODUCER", "RESPONSIBLE"
  startDate       DateTime  @default(now())
  endDate         DateTime?
  permissions     Json      @default("[]") // Array of permissions
  notes           String?
  
  staff           Staff     @relation("StaffOwnsProduct", fields: [staffId], references: [id])
  product         Product   @relation("ProductOwnedByStaff", fields: [productId], references: [id])
  
  @@unique([staffId, productId, relationship])
  @@index([staffId])
  @@index([productId])
  @@map("staff_products")
}

model ProductSupplier {
  id              String    @id @default(cuid())
  productId       String
  supplierId      String
  supplierSKU     String?
  supplierPrice   Decimal   @db.Decimal(12, 2)
  leadTimeDays    Int?
  minOrderQty     Int       @default(1)
  isPreferred     Boolean   @default(false)
  isActive        Boolean   @default(true)
  lastPurchase    DateTime?
  notes           String?
  
  product         Product   @relation(fields: [productId], references: [id])
  supplier        Supplier  @relation(fields: [supplierId], references: [id])
  
  @@unique([productId, supplierId])
  @@index([productId])
  @@index([supplierId])
  @@map("product_suppliers")
}

model StaffCustomer {
  id              String    @id @default(cuid())
  staffId         String
  customerId      String
  relationship    String    // e.g., "ACCOUNT_MANAGER", "SALES_REP", "SUPPORT"
  startDate       DateTime  @default(now())
  endDate         DateTime?
  commissionRate  Decimal?  @db.Decimal(5, 2) // Percentage
  notes           String?
  
  staff           Staff     @relation(fields: [staffId], references: [id])
  customer        Customer  @relation(fields: [customerId], references: [id])
  
  @@unique([staffId, customerId, relationship])
  @@index([staffId])
  @@index([customerId])
  @@map("staff_customers")
}

// ==========================================
// MOVEMENT & TRACKING
// ==========================================

model ProductMovement {
  id              String          @id @default(cuid())
  type            MovementType
  productId       String
  quantity        Int
  fromLocation    String?
  toLocation      String?
  supplierId      String?
  receivedById    String?
  deliveredById   String?
  referenceType   String?         // e.g., "PURCHASE_ORDER", "SALE", "ADJUSTMENT"
  referenceId     String?
  cost            Decimal?        @db.Decimal(12, 2)
  notes           String?
  metadata        Json            @default("{}")
  tenantId        String
  createdAt       DateTime        @default(now())
  
  // Relations
  product         Product         @relation(fields: [productId], references: [id])
  supplier        Supplier?       @relation(fields: [supplierId], references: [id])
  receivedBy      Staff?          @relation("ReceivedByStaff", fields: [receivedById], references: [id])
  deliveredBy     Staff?          @relation("DeliveredByStaff", fields: [deliveredById], references: [id])
  tenant          Tenant          @relation(fields: [tenantId], references: [id])
  
  @@index([productId])
  @@index([supplierId])
  @@index([tenantId, createdAt])
  @@map("product_movements")
}

// ==========================================
// TRANSACTIONS & ORDERS
// ==========================================

model Transaction {
  id              String              @id @default(cuid())
  type            TransactionType
  status          TransactionStatus
  customerId      String?
  subtotal        Decimal             @db.Decimal(12, 2)
  tax             Decimal             @db.Decimal(12, 2)
  discount        Decimal             @db.Decimal(12, 2) @default(0)
  total           Decimal             @db.Decimal(12, 2)
  paymentMethod   PaymentMethod?
  paymentStatus   PaymentStatus       @default(PENDING)
  notes           String?
  metadata        Json                @default("{}")
  tenantId        String
  createdById     String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  customer        Customer?           @relation(fields: [customerId], references: [id])
  createdBy       Staff?              @relation("TransactionCreatedBy", fields: [createdById], references: [id])
  items           TransactionItem[]
  taxDocuments    TaxDocument[]
  
  @@index([tenantId, status])
  @@index([tenantId, createdAt])
  @@map("transactions")
}

model TransactionItem {
  id              String      @id @default(cuid())
  transactionId   String
  productId       String?
  productName     String
  quantity        Int
  unitPrice       Decimal     @db.Decimal(12, 2)
  discount        Decimal     @db.Decimal(12, 2) @default(0)
  totalPrice      Decimal     @db.Decimal(12, 2)
  
  // Relations
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product         Product?    @relation(fields: [productId], references: [id])
  
  @@map("transaction_items")
}

model PurchaseOrder {
  id              String            @id @default(cuid())
  orderNumber     String            
  supplierId      String
  status          PurchaseStatus
  orderDate       DateTime          @default(now())
  expectedDate    DateTime?
  receivedDate    DateTime?
  subtotal        Decimal           @db.Decimal(12, 2)
  tax             Decimal           @db.Decimal(12, 2)
  shipping        Decimal           @db.Decimal(12, 2) @default(0)
  total           Decimal           @db.Decimal(12, 2)
  notes           String?
  metadata        Json              @default("{}")
  tenantId        String
  createdById     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  supplier        Supplier          @relation(fields: [supplierId], references: [id])
  tenant          Tenant            @relation(fields: [tenantId], references: [id])
  items           PurchaseOrderItem[]
  
  @@unique([tenantId, orderNumber])
  @@index([supplierId])
  @@index([tenantId, status])
  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String        @id @default(cuid())
  purchaseOrderId String
  productId       String
  quantity        Int
  unitPrice       Decimal       @db.Decimal(12, 2)
  totalPrice      Decimal       @db.Decimal(12, 2)
  receivedQty     Int           @default(0)
  
  // Relations
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  
  @@map("purchase_order_items")
}

// ==========================================
// INVENTORY & STOCK
// ==========================================

model InventoryRecord {
  id              String    @id @default(cuid())
  productId       String
  location        String
  quantity        Int
  reservedQty     Int       @default(0)
  availableQty    Int
  lastCountDate   DateTime?
  notes           String?
  tenantId        String
  updatedAt       DateTime  @updatedAt
  
  // Relations
  product         Product   @relation(fields: [productId], references: [id])
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
  
  @@unique([productId, location, tenantId])
  @@map("inventory_records")
}

// ==========================================
// TAX & COMPLIANCE
// ==========================================

model TaxDocument {
  id               String            @id @default(cuid())
  type             TaxDocumentType
  folio            String?
  documentCode     Int?
  transactionId    String?
  emitterRUT       String?
  emitterName      String?
  receiverRUT      String?
  receiverName     String?
  netAmount        Decimal?          @db.Decimal(12, 2)
  taxAmount        Decimal?          @db.Decimal(12, 2)
  totalAmount      Decimal?          @db.Decimal(12, 2)
  currency         String            @default("CLP")
  issuedAt         DateTime?
  status           TaxDocumentStatus @default(DRAFT)
  pdfUrl           String?
  xmlUrl           String?
  rawResponse      Json?
  tenantId         String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // Relations
  tenant           Tenant            @relation(fields: [tenantId], references: [id])
  transaction      Transaction?      @relation(fields: [transactionId], references: [id])
  items            TaxDocumentItem[]
  
  @@index([tenantId, status])
  @@map("tax_documents")
}

model TaxDocumentItem {
  id            String        @id @default(cuid())
  taxDocumentId String
  productName   String
  quantity      Int
  unitPrice     Decimal       @db.Decimal(12, 2)
  totalPrice    Decimal       @db.Decimal(12, 2)
  
  taxDocument   TaxDocument   @relation(fields: [taxDocumentId], references: [id], onDelete: Cascade)
  
  @@map("tax_document_items")
}

// ==========================================
// SYSTEM & MULTI-TENANCY
// ==========================================

model Tenant {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  rut           String?
  address       String?
  phone         String?
  email         String?
  domain        String?
  settings      Json      @default("{}")
  features      Json      @default("[]")
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  staff           Staff[]
  products        Product[]
  suppliers       Supplier[]
  customers       Customer[]
  transactions    Transaction[]
  taxDocuments    TaxDocument[]
  movements       ProductMovement[]
  purchaseOrders  PurchaseOrder[]
  inventory       InventoryRecord[]
  
  @@map("tenants")
}

model AuditLog {
  id            String    @id @default(cuid())
  staffId       String?
  action        String
  entity        String
  entityId      String?
  oldData       Json?
  newData       Json?
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime  @default(now())
  
  staff         Staff?    @relation(fields: [staffId], references: [id])
  
  @@index([entity, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

// ==========================================
// ENUMS
// ==========================================

enum StaffRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  SUPERVISOR
  EMPLOYEE
  CONTRACTOR
  INTERN
}

enum MovementType {
  PURCHASE
  SALE
  TRANSFER
  ADJUSTMENT
  RETURN
  DAMAGE
  PRODUCTION
}

enum TransactionType {
  SALE
  REFUND
  EXCHANGE
  QUOTE
}

enum TransactionStatus {
  DRAFT
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  TRANSFER
  CHECK
  CREDIT
  OTHER
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
  REFUNDED
}

enum PurchaseStatus {
  DRAFT
  ORDERED
  PARTIAL_RECEIVED
  RECEIVED
  CANCELLED
}

enum TaxDocumentType {
  BOLETA
  FACTURA
  NOTA_CREDITO
  NOTA_DEBITO
  GUIA_DESPACHO
}

enum TaxDocumentStatus {
  DRAFT
  ISSUED
  CANCELLED
  REJECTED
}
